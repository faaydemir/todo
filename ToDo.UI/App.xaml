<Application x:Class="TODO.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:TODO"
             StartupUri="MainWindow.xaml">
    <Application.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <!-- Accent and AppTheme setting -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />

                <ResourceDictionary Source="Styles\Colors.xaml" />
                <ResourceDictionary>
                    <Style x:Key="{x:Type ListViewItem}" TargetType="ListViewItem">
                        <Setter Property="SnapsToDevicePixels" Value="true" />
                        <Setter Property="OverridesDefaultStyle" Value="true" />
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="ListViewItem">
                                    <Border Name="Border" Padding="2" SnapsToDevicePixels="true" Background="Transparent">
                                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsSelected" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="Transparent" />
                                        </Trigger>
                                        <Trigger Property="IsEnabled" Value="false">
                                            <Setter Property="Foreground" Value="Transparent" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="true">
                                            <Setter TargetName="Border" Property="Background" Value="Transparent" />
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>

                    <Style TargetType="{x:Type TextBlock}">
                        <Setter Property="FontSize" Value="14" />
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                    </Style>
                    <Style TargetType="{x:Type TextBox}">
                        <Setter Property="FontSize" Value="14" />
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                    </Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="FontSize" Value="14" />
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                    </Style>

                    <Style  x:Key="ButtonFlat" TargetType="{x:Type Button}">
                        <Setter Property="Padding" Value="0"></Setter>
                        <Setter Property="Background" Value="Transparent"></Setter>
                        <Setter Property="BorderThickness" Value="0"></Setter>
                    </Style>

                    <Style x:Key="TextBoxTitleStyle" TargetType="{x:Type TextBox}">
                        <Setter Property="BorderThickness" Value="0,0,0,1"></Setter>
                        <Setter Property="Background" Value="Transparent"></Setter>
                        <Setter Property="FontSize" Value="30"></Setter>
                        <Setter Property="Margin" Value="40,0,20,20"></Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsEditMode}" Value="True">
                                <Setter Property="Background" Value="#FED077"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style x:Key="TextBoxDetailStyle" TargetType="{x:Type TextBox}">
                        <Setter Property="BorderThickness" Value="0"></Setter>
                        <Setter Property="Background" Value="Transparent"></Setter>
                        <Setter Property="FontSize" Value="20"></Setter>
                        <Setter Property="Margin" Value="40,0,20,0"></Setter>
                        <Setter Property="TextWrapping" Value="Wrap"></Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsEditMode}" Value="True">
                                <Setter Property="Background" Value="#FED077"></Setter>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>

                    <Style  x:Key="TextBlockTitle" TargetType="{x:Type TextBlock}">
                        <Setter Property="Margin" Value="10"></Setter>
                        <Setter Property="FontSize" Value="20"></Setter>
                        <Setter Property="FontFamily" Value="/Font/#Roboto Black"></Setter>
                    </Style>

                    <Style  x:Key="TextBlockInfo" TargetType="{x:Type TextBlock}">
                        <Setter Property="Margin" Value="10,10,10,0"></Setter>
                        <Setter Property="FontSize" Value="10"></Setter>
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                    </Style>

                    <Style  x:Key="TextBlockFormLabel" TargetType="{x:Type TextBlock}">
                        <Setter Property="Margin" Value="10,10,10,0"></Setter>
                        <Setter Property="FontSize" Value="10"></Setter>
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                    </Style>

                    <Style  x:Key="PasswordBoxForm" TargetType="{x:Type PasswordBox}">
                        <Setter Property="Margin" Value="20,3,10,10"></Setter>
                        <Setter Property="FontSize" Value="30"></Setter>
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                    </Style>

                    <Style  x:Key="TextBoxForm"  TargetType="{x:Type TextBox}">
                        <Setter Property="Margin" Value="20,3,10,10"></Setter>
                        <Setter Property="FontSize" Value="20"></Setter>
                        <Setter Property="Padding" Value="5"></Setter>
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                    </Style>

                    <Style x:Key="ButtonAction"  TargetType="{x:Type Button}">
                        <Setter Property="Margin" Value="5"></Setter>
                        <Setter Property="Padding" Value="5"></Setter>
                        <Setter Property="Foreground" Value="White"></Setter>
                        <Setter Property="Background" Value="{StaticResource activeBlue}"></Setter>
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Grid>
                                        <Border
                                            CornerRadius="9"
                                            Background="{TemplateBinding Background}"
                                            BorderBrush="{TemplateBinding Background}"
                                            BorderThickness="2"
                                            x:Name="asdf">
                                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                        </Border>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                    <Style x:Key="Button_ActionStyle" TargetType="{x:Type Button}">
                        <Setter Property="Margin" Value="5"></Setter>
                        <Setter Property="Padding" Value="5"></Setter>
                        <Setter Property="Width" Value="30"></Setter>
                        <Setter Property="Height" Value="30"></Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="Button">
                                    <Grid>
                                        <Border
                                            CornerRadius="9"
                                            Background="{TemplateBinding Background}"
                                            BorderThickness="2"
                                            Opacity="0.5">
                                        </Border>
                                        <Border
                                            CornerRadius="9"
                                            Background="Transparent"
                                            BorderBrush="{TemplateBinding Background}"
                                            BorderThickness="2"
                                            x:Name="asdf">
                                            <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                                        </Border>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>

                <ResourceDictionary>
                    <Style  x:Key="TextBlockTopicStyle" TargetType="{x:Type TextBlock}">
                        <Setter Property="FontSize" Value="18"></Setter>
                        <Setter Property="FontFamily" Value="/Font/#Roboto Black"></Setter>
                        <Setter Property="Foreground" Value="{StaticResource fontGray}"></Setter>
                        <Setter Property="Typography.Capitals"      Value="AllSmallCaps"></Setter>
                    </Style>
                    <Style  x:Key="TextBlockTodoStyle" TargetType="{x:Type TextBlock}">
                        <Setter Property="FontSize" Value="20"></Setter>
                        <Setter Property="FontFamily" Value="/Font/#Roboto Ligth"></Setter>
                        <Style.Triggers>
                            <Trigger Property ="IsMouseOver" Value="True">
                                <Setter Property= "Foreground" Value="{StaticResource activeBlue}" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <!--<Style x:Key="ListViewToDoListStyle" TargetType="ListView">
                    </Style>-->

                    <Style TargetType="{x:Type CheckBox}"  x:Key="CheckBox_CircleStyle">
                        <Setter Property="Foreground"
Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                        <Setter Property="Background" Value="#F4F4F4" />
                        <Setter Property="BorderBrush" Value="#8E8F8F" />
                        <Setter Property="BorderThickness" Value="1" />
                        <Setter Property="FocusVisualStyle">
                            <Setter.Value>
                                <Style>
                                    <Setter Property="Control.Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Rectangle Margin="1" SnapsToDevicePixels="True"
Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
StrokeThickness="1" StrokeDashArray="1 2" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="CheckBox">
                                    <Grid>

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <VisualStateManager.VisualStateGroups>
                                            <VisualStateGroup x:Name="CheckStates">
                                                <VisualState x:Name="Unchecked" />
                                                <VisualState x:Name="Checked">
                                                    <Storyboard>
                                                        <DoubleAnimation Duration="0:0:.25"  To="1" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="background" />
                                                    </Storyboard>
                                                </VisualState>
                                                <VisualState x:Name="Indeterminate" />
                                            </VisualStateGroup>
                                        </VisualStateManager.VisualStateGroups>
                                        <Ellipse x:Name="blackframe"   VerticalAlignment="Center" Stroke="Gray" Width="20" Height="20" Opacity="0.7" />
                                        <Ellipse x:Name="background"  VerticalAlignment="Center" Margin="2" Fill="Bisque" Width="14" Height="14" Opacity="0" />
                                        <Grid  HorizontalAlignment="Left" VerticalAlignment="Center" Grid.Column="1" Margin="5,0,5,0">
                                            <ContentPresenter x:Name="contentPresenter" VerticalAlignment="Center" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ResourceDictionary>
                <!-- CONVERTERS -->
                <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wpfUtils="clr-namespace:WpfUtils.Converters">
                    <wpfUtils:BoolToInverseBooleanConverter x:Key="BoolToInverseBooleanConverter" />
                    <wpfUtils:BoolToInverseVisibilityConverter x:Key="BoolToInverseVisibilityConverter" />
                    <wpfUtils:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>